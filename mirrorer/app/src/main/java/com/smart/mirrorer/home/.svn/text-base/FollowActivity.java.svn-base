package com.smart.mirrorer.home;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Log;

import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.justalk.cloud.juscall.MtcCallDelegate;
import com.justalk.cloud.juspush.MiPush;
import com.justalk.cloud.lemon.MtcCallConstants;
import com.smart.mirrorer.R;
import com.smart.mirrorer.adapter.RecommonLikeFollowAdapter;
import com.smart.mirrorer.base.BaseApplication;
import com.smart.mirrorer.base.BaseTitleActivity;
import com.smart.mirrorer.bean.home.CommonTutorItemData;
import com.smart.mirrorer.bean.home.OrderDetailsBean;
import com.smart.mirrorer.bean.home.OrderDetailsData;
import com.smart.mirrorer.bean.home.QuestionFocusTutorsBean;
import com.smart.mirrorer.bean.home.RecommonBean;
import com.smart.mirrorer.net.GsonCallbackListener;
import com.smart.mirrorer.net.PerfectJsonObjectRequest;
import com.smart.mirrorer.util.AppFilePath;
import com.smart.mirrorer.util.CommonUtils;
import com.smart.mirrorer.util.GloabalRequestUtil;
import com.smart.mirrorer.util.MirrorSettings;
import com.smart.mirrorer.util.TipsUtils;
import com.smart.mirrorer.util.Urls;
import com.videorecorder.util.FileUtils;
import com.xiaomi.mipush.sdk.MiPushClient;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.List;

/**
 * Created by lzm on 16/4/8.
 */
public class FollowActivity extends BaseTitleActivity {

    public static final String KEY_IS_FOLLOW = "key_is_follow";

    private RecommonLikeFollowAdapter mAdapter;

    private String mUid;

    private boolean isFollowType; //关注界面

    private MirrorSettings mSettings;
    private String mCallId;
    private String mNickName;
    private String mHisNick;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_follow_layout);
        setupNavigationBar(R.id.navigation_bar);

        LocalBroadcastManager.getInstance(this).registerReceiver(mCallReceiver, new IntentFilter(MtcCallConstants.MtcCallTalkingNotification));
        LocalBroadcastManager.getInstance(this).registerReceiver(mCallReceiver, new IntentFilter(MtcCallConstants.MtcCallDidTermNotification));
        LocalBroadcastManager.getInstance(this).registerReceiver(mCallReceiver, new IntentFilter(MtcCallConstants.MtcCallTermedNotification));

        isFollowType = getIntent().getExtras().getBoolean(KEY_IS_FOLLOW);
        if (isFollowType) {
            setCommonTitle(R.string.my_follow_text);
        } else {
            setCommonTitle("推荐导师");
        }

        mSettings = BaseApplication.getSettings(this);
        mUid = mSettings.APP_UID.getValue();
        mNickName = mSettings.USER_NICK.getValue();
        initView();

        if (isFollowType) {
            getFollowedList();
        } else {
            getRecommonList();
        }
    }

    private void initView() {
        RecyclerView followListview = (RecyclerView) findViewById(R.id.follow_recycle_view);
        followListview.setLayoutManager(new LinearLayoutManager(this));
        mAdapter = new RecommonLikeFollowAdapter(this, isFollowType);
        mAdapter.setVideoCallListener(new RecommonLikeFollowAdapter.ICallVideoListener() {
            @Override
            public void callVideo(CommonTutorItemData itemData) {
                mCallId = itemData.getUid();
                mHisNick = itemData.getNickName();
                CommonUtils.getOrderId(FollowActivity.this, mUid, "0", itemData.getUid(), mOrderCallback);
            }
        });
        followListview.setAdapter(mAdapter);
    }

    private Response.Listener<JSONObject> mOrderCallback = new Response.Listener<JSONObject>() {

        @Override
        public void onResponse(JSONObject response) {
            dismissLoadDialog();
            Log.e("lzm", "ORDER_text=" + response.toString());

            boolean isOk = GloabalRequestUtil.isRequestOk(response);
            if (isOk) {
                String orderId = GloabalRequestUtil.parseOrderId(response);
                callVideo(orderId);
            } else {
                String errorMsg = GloabalRequestUtil.getNetErrorMsg(response);
                TipsUtils.showShort(getApplicationContext(), errorMsg);
            }
        }
    };


    private String mCallOrderId;

    /**
     * 呼叫视频
     *
     * @param orderId
     */
    private void callVideo(String orderId) {
        mCallOrderId = orderId;
        HashMap<String, String> callParams = new HashMap<>();
        callParams.put("MtcCallInfoServerUserDataKey", orderId);
        MtcCallDelegate.call(mCallId, mNickName, mHisNick, true, callParams);

        registerMiPush();
    }

    private void registerMiPush() {
        String regId = MiPushClient.getRegId(getApplicationContext());
        Log.e("lzm", "regId=" + regId);

        JSONObject pcParam = new JSONObject();
        try {
            pcParam.put("Notify.MiPush.AppId", "瞬语");
            pcParam.put("Notify.MiPush.RegId", regId);
            pcParam.put("Notify.MiPush.Invite.Payload", "粉丝呼叫");
            pcParam.put("Notify.MiPush.Invite.Expiration", "10");
        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.e("lzm", "pcParms=" + pcParam);
        MiPush.register(getApplicationContext(), pcParam.toString());
    }

    /**
     * 获取推荐导师
     */
    private void getRecommonList() {
        showLoadDialog();
        String tag_json_obj = "json_obj_home_recommond_req";
        JSONObject paramObj = new JSONObject();
        try {
            paramObj.put("limit", "4");
        } catch (JSONException e) {
            e.printStackTrace();
        }

        PerfectJsonObjectRequest jsonObjReq = new PerfectJsonObjectRequest(mUid, Request.Method.POST,
                Urls.URL_TUTOR_RECOMMOND, paramObj, mRecommondCallBack, new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                dismissLoadDialog();
                TipsUtils.showShort(getApplicationContext(), error.getMessage());
            }
        });

        // Adding request to request queue
        BaseApplication.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
    }

    private GsonCallbackListener<RecommonBean> mRecommondCallBack = new GsonCallbackListener<RecommonBean>() {
        @Override
        public void onResultSuccess(RecommonBean recommonBean) {
            super.onResultSuccess(recommonBean);
            dismissLoadDialog();
            if (recommonBean == null) {
                return;
            }

            RecommonBean.ResultBean recommondResult = recommonBean.getResult();
            if (recommondResult == null) {
                return;
            }

            List<CommonTutorItemData> listDatas = recommondResult.getList();
            if (listDatas == null || listDatas.isEmpty()) {
                return;
            }

            mAdapter.setListData(listDatas);
        }

        @Override
        public void onFailed(String errorMsg) {
            super.onFailed(errorMsg);
            dismissLoadDialog();
            TipsUtils.showShort(getApplicationContext(), errorMsg);
        }
    };

    /**
     * 获取关注列表
     */
    private void getFollowedList() {
        String tag_json_obj = "json_obj_followed_list_req";
        showLoadDialog();

        PerfectJsonObjectRequest jsonObjReq = new PerfectJsonObjectRequest(mUid, Request.Method.POST,
                Urls.URL_FOLLOWED_TUTOR_LIST, null, mFollowedListCallback, new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                TipsUtils.showShort(getApplicationContext(), error.getMessage());
                dismissLoadDialog();
            }
        });

        // Adding request to request queue
        BaseApplication.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
    }

    private GsonCallbackListener<QuestionFocusTutorsBean> mFollowedListCallback = new GsonCallbackListener<QuestionFocusTutorsBean>() {
        @Override
        public void onResultSuccess(QuestionFocusTutorsBean questionFocusTutorsBean) {
            super.onResultSuccess(questionFocusTutorsBean);
            dismissLoadDialog();

            if (questionFocusTutorsBean == null) {
                return;
            }

            List<CommonTutorItemData> itemList = questionFocusTutorsBean.getResult();
            if (itemList == null || itemList.isEmpty()) {
                return;
            }

            mAdapter.setListData(itemList);
        }

        @Override
        public void onFailed(String errorMsg) {
            super.onFailed(errorMsg);
            TipsUtils.showShort(getApplicationContext(), errorMsg);
            dismissLoadDialog();
        }
    };

    private boolean isCallConnected;

    private BroadcastReceiver mCallReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            String outFile = AppFilePath.getJusVideoRecordFile(System.currentTimeMillis() + FileUtils.FILE_FORMAT).getAbsolutePath();
            Log.e("lzm", "outFile=" + outFile);

            if (MtcCallConstants.MtcCallTalkingNotification.equals(action)) { //通话接通
                mSettings.APP_IS_UN_PAY.setValue(true);
                isCallConnected = true;

            } else if (MtcCallConstants.MtcCallDidTermNotification.equals(action)) {
                //通话结束事件，主动挂断
                if(isCallConnected) {
                    getOrderDetails();
                }
                isCallConnected = false;
            } else if (MtcCallConstants.MtcCallTermedNotification.equals(action)) {
                // 通话结束事件，被动挂断
                if(isCallConnected) {
                    getOrderDetails();
                }
                isCallConnected = false;
            }

        }
    };

    private void getOrderDetails() {
        if (TextUtils.isEmpty(mCallOrderId)) {
            return;
        }

        CommonUtils.getOrderDetails(FollowActivity.this, mUid, mCallOrderId, "1", mOrderDetailCallback);
    }


    private GsonCallbackListener<OrderDetailsBean> mOrderDetailCallback = new GsonCallbackListener<OrderDetailsBean>() {

        @Override
        public void onResultSuccess(OrderDetailsBean orderDetailsBean) {
            super.onResultSuccess(orderDetailsBean);
            dismissLoadDialog();
            if(orderDetailsBean == null) {
                return;
            }

            OrderDetailsData detailData = orderDetailsBean.getResult();
            if(detailData == null) {
                return;
            }

            Intent payIntent = new Intent(FollowActivity.this, PayOrderConfirmAcitivity.class);
            payIntent.putExtra(PayOrderConfirmAcitivity.KEY_DATA_ORDER, detailData);
            startActivity(payIntent);
        }

        @Override
        public void onFailed(String errorMsg) {
            super.onFailed(errorMsg);
            dismissLoadDialog();
            TipsUtils.showShort(getApplicationContext(), errorMsg);
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mCallReceiver);
    }
}
