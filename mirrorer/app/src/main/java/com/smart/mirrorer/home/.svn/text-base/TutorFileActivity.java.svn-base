package com.smart.mirrorer.home;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.justalk.cloud.juscall.MtcCallDelegate;
import com.justalk.cloud.juspush.MiPush;
import com.justalk.cloud.lemon.MtcCallConstants;
import com.smart.mirrorer.R;
import com.smart.mirrorer.adapter.CommonAdapter;
import com.smart.mirrorer.base.BaseActivity;
import com.smart.mirrorer.base.BaseApplication;
import com.smart.mirrorer.bean.home.OrderDetailsBean;
import com.smart.mirrorer.bean.home.OrderDetailsData;
import com.smart.mirrorer.bean.home.RecordFileBean;
import com.smart.mirrorer.net.GsonCallbackListener;
import com.smart.mirrorer.net.PerfectJsonObjectRequest;
import com.smart.mirrorer.util.AppFilePath;
import com.smart.mirrorer.util.CommonUtils;
import com.smart.mirrorer.util.GloabalRequestUtil;
import com.smart.mirrorer.util.MirrorSettings;
import com.smart.mirrorer.util.TipsUtils;
import com.smart.mirrorer.util.Urls;
import com.smart.mirrorer.view.ScrollListView;
import com.videorecorder.util.FileUtils;
import com.xiaomi.mipush.sdk.MiPushClient;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.List;

/**
 * Created by lzm on 16/4/9.
 */
public class TutorFileActivity extends BaseActivity implements View.OnClickListener {

    public static final String KEY_ISNOT_TUTOR = "key_isnot_tutor";
    public static final String KEY_USE_UID = "key_use_uid";

    private boolean isNotTutorType;

    private String mUid;

    private TextView mTitleTv;
    private ImageView mHeadIv;
    private TextView mNameTv;
    private TextView mCompanyTv;
    private TextView mPositionTv;
    private TextView mFiveMinuteTv;
    private TextView mMinuteTv;
    private TextView mStarCountTv;
    private TextView mCallCountTv;
    private TextView mFansCountTv;
    private TextView mFollowCountTv;
    private TextView mDescTv;
//    private TextView mCommonCountTv;

    private ScrollListView mJobListview;
    private ScrollListView mEduListview;
    private CommonAdapter<RecordFileBean.ResultBean.WorkFlowBean> mJobAdapter;
    private CommonAdapter<RecordFileBean.ResultBean.EduFlowBean> mEduAdapter;

    private String mBussnessId; //业务逻辑需要的uid
    private String mNick;

    private RelativeLayout mVideoLayout;
    private ImageView mFollowIv;

    private MirrorSettings mSettings;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.tutor_file_layout);

        LocalBroadcastManager.getInstance(this).registerReceiver(mCallReceiver, new IntentFilter(MtcCallConstants.MtcCallTalkingNotification));
        LocalBroadcastManager.getInstance(this).registerReceiver(mCallReceiver, new IntentFilter(MtcCallConstants.MtcCallDidTermNotification));
        LocalBroadcastManager.getInstance(this).registerReceiver(mCallReceiver, new IntentFilter(MtcCallConstants.MtcCallTermedNotification));


        isNotTutorType = getIntent().getExtras().getBoolean(KEY_ISNOT_TUTOR);
        mBussnessId = getIntent().getExtras().getString(KEY_USE_UID);
        initView();

        mSettings = new MirrorSettings(this);
        mUid = mSettings.APP_UID.getValue();
        mNick = mSettings.USER_NICK.getValue();

        getFileData();
    }

    /**
     * 获取导师档案
     */
    private void getFileData() {
        String tag_json_obj = "json_obj_get_file_req";
        showLoadDialog();
        JSONObject param = new JSONObject();
        try {
            if (TextUtils.isEmpty(mBussnessId)) {
                param.put("gid", "0");
            } else {
                param.put("gid", mBussnessId);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        PerfectJsonObjectRequest jsonObjReq = new PerfectJsonObjectRequest(mUid, Request.Method.POST,
                Urls.URL_RECORD_FILE, param, mFileCallBack, new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                TipsUtils.showShort(getApplicationContext(), error.getMessage());
                dismissLoadDialog();
            }
        });

        // Adding request to request queue
        BaseApplication.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
    }

    private GsonCallbackListener<RecordFileBean> mFileCallBack = new GsonCallbackListener<RecordFileBean>() {
        @Override
        public void onResultSuccess(RecordFileBean recordFileBean) {
            super.onResultSuccess(recordFileBean);
            dismissLoadDialog();
            if (recordFileBean == null || recordFileBean.getResult() == null) {
                return;
            }

            updateUI(recordFileBean.getResult());
        }

        @Override
        public void onFailed(String errorMsg) {
            super.onFailed(errorMsg);
            dismissLoadDialog();
            TipsUtils.showShort(getApplicationContext(), errorMsg);
        }
    };

    /**
     * 更新UI
     *
     * @param recordFileBean
     */
    private void updateUI(RecordFileBean.ResultBean recordFileBean) {
        String headUrl = recordFileBean.getHeadImgUrl();
        Log.e("lzm", "headUrl =" + headUrl);
        if (TextUtils.isEmpty(headUrl)) {
            mHeadIv.setImageResource(R.drawable.app_default_head_icon);
        } else {
            BaseApplication.mImageLoader.displayImage(headUrl, mHeadIv, BaseApplication.headOptions);
        }

        mOneNick = recordFileBean.getRealName();

        isFollowed = recordFileBean.getIsFollowed() == 1 ? true : false;
        if (isFollowed) {
            mFollowIv.setImageResource(R.drawable.ic_title_follow_al);
        } else {
            mFollowIv.setImageResource(R.drawable.ic_title_follow);
        }

        mVideoUrl = recordFileBean.getVideoUrl();

        mNameTv.setText(recordFileBean.getRealName());
        mCompanyTv.setText(recordFileBean.getCompany());
        mPositionTv.setText(recordFileBean.getTitle());
        mFiveMinuteTv.setText(getString(R.string.tutor_five_minute_price, recordFileBean.getStartPrice() + ""));
        mMinuteTv.setText(getString(R.string.tutor_minute_price, recordFileBean.getMinutePrice() + ""));
        mStarCountTv.setText(recordFileBean.getStar() + "");
        mCallCountTv.setText(recordFileBean.getHelpCount() + "");
        mFansCountTv.setText(recordFileBean.getFansCount() + "");
        mFollowCountTv.setText(recordFileBean.getFocusCount() + "");
        mDescTv.setText(recordFileBean.getIntroduce());
//        mCommonCountTv.setText(getString(R.string.file_common_count_text, recordFileBean.getCommentCount()+""));

        List<RecordFileBean.ResultBean.WorkFlowBean> jobList = recordFileBean.getWorkFlow();
        if (jobList != null && !jobList.isEmpty()) {
            mJobAdapter.setData(jobList);
        }

        List<RecordFileBean.ResultBean.EduFlowBean> eduList = recordFileBean.getEduFlow();
        if (eduList != null && !eduList.isEmpty()) {
            mEduAdapter.setData(eduList);
        }
    }

    private void initView() {
        RelativeLayout bottomLayout = (RelativeLayout) findViewById(R.id.tutor_file_bottom_layout);
        bottomLayout.getBackground().setAlpha(175);
        bottomLayout.setOnClickListener(this);

        LinearLayout backLayout = (LinearLayout) findViewById(R.id.tutor_file_back_ll);
        backLayout.setOnClickListener(this);

        mTitleTv = (TextView) findViewById(R.id.file_title_tv);
        mFollowIv = (ImageView) findViewById(R.id.tutor_file_follow_iv);
        mFollowIv.setOnClickListener(this);

        LinearLayout tutorPriceLayout = (LinearLayout) findViewById(R.id.tutor_file_price_layout);
        if (isNotTutorType) {
            bottomLayout.setVisibility(View.GONE);
            tutorPriceLayout.setVisibility(View.GONE);
            mFollowIv.setVisibility(View.INVISIBLE);
            mTitleTv.setText("我的档案");
        } else {
            bottomLayout.setVisibility(View.VISIBLE);
            tutorPriceLayout.setVisibility(View.VISIBLE);
            mFollowIv.setVisibility(View.VISIBLE);
            mTitleTv.setText("导师档案");
        }


        mVideoLayout = (RelativeLayout) findViewById(R.id.file_video_layout);
        ImageView playIv = (ImageView) findViewById(R.id.file_video_play_iv);
        playIv.setOnClickListener(this);

        mHeadIv = (ImageView) findViewById(R.id.tutor_file_head_iv);
        mNameTv = (TextView) findViewById(R.id.file_name_tv);
        mCompanyTv = (TextView) findViewById(R.id.file_company_tv);
        mPositionTv = (TextView) findViewById(R.id.file_position_tv);
        mFiveMinuteTv = (TextView) findViewById(R.id.file_five_minute_tv);
        mMinuteTv = (TextView) findViewById(R.id.file_minute_tv);
        mStarCountTv = (TextView) findViewById(R.id.tutor_file_right_count_tv);
        mCallCountTv = (TextView) findViewById(R.id.file_call_count_tv);
        mFansCountTv = (TextView) findViewById(R.id.file_fans_count_tv);
        mFollowCountTv = (TextView) findViewById(R.id.file_follow_count_tv);
        mDescTv = (TextView) findViewById(R.id.file_desc_tv);
//        mCommonCountTv = (TextView) findViewById(R.id.file_common_count_tv);

        mJobListview = (ScrollListView) findViewById(R.id.file_job_listview);
        mEduListview = (ScrollListView) findViewById(R.id.file_edu_listview);
        mJobAdapter = new CommonAdapter<RecordFileBean.ResultBean.WorkFlowBean>(this, R.layout.item_file_job_layout_cell) {
            @Override
            protected void convert(ViewHolderEntity vh, RecordFileBean.ResultBean.WorkFlowBean itemData, int itemViewType) {
                TextView timeTv = vh.getView(R.id.item_file_job_time_tv);
                TextView companyTv = vh.getView(R.id.item_file_job_company_tv);
                TextView positionTv = vh.getView(R.id.item_file_job_position_tv);

                timeTv.setText(itemData.getStartYear() + " - " + itemData.getEndYear());
                companyTv.setText(itemData.getCompany());
                positionTv.setText(itemData.getTitle());
            }
        };
        mJobListview.setAdapter(mJobAdapter);

        mEduAdapter = new CommonAdapter<RecordFileBean.ResultBean.EduFlowBean>(this, R.layout.item_file_edu_layout_cell) {
            @Override
            protected void convert(ViewHolderEntity vh, RecordFileBean.ResultBean.EduFlowBean itemData, int itemViewType) {
                TextView timeTv = vh.getView(R.id.item_file_edu_time_tv);
                TextView schoolTv = vh.getView(R.id.item_file_edu_shcool_tv);
                TextView professionalTv = vh.getView(R.id.item_file_edu_professional_tv);

                timeTv.setText(itemData.getStartYear() + " - " + itemData.getEndYear());
                schoolTv.setText(itemData.getSchool());
                professionalTv.setText(itemData.getProfessional());
            }
        };
        mEduListview.setAdapter(mEduAdapter);
    }

    private String mOneNick;

    private boolean isFollowed;//是否已经关注
    private String mVideoUrl;

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tutor_file_back_ll:
                finish();
                break;
            case R.id.tutor_file_bottom_layout:
                CommonUtils.getOrderId(TutorFileActivity.this, mUid, "0", mBussnessId, mOrderCallback);
                break;
            case R.id.file_video_play_iv:
                if (TextUtils.isEmpty(mVideoUrl)) {
                    return;
                }

                Uri uri = Uri.parse(mVideoUrl);
                Intent intent = new Intent(Intent.ACTION_VIEW);
                Log.v("lzm", uri.toString());
                intent.setDataAndType(uri, "video/mp4");
                startActivity(intent);
                break;
            case R.id.tutor_file_follow_iv:
                if (isFollowed) {
                    cancelFollowTutor();
                } else {
                    followTutor();
                }
                break;
        }
    }

    private Response.Listener<JSONObject> mOrderCallback = new Response.Listener<JSONObject>() {

        @Override
        public void onResponse(JSONObject response) {
            dismissLoadDialog();

            Log.e("lzm", "ORDER_text=" + response.toString());

            boolean isOk = GloabalRequestUtil.isRequestOk(response);
            if (isOk) {
                String orderId = GloabalRequestUtil.parseOrderId(response);
                callVideo(orderId);
            } else {
                String errorMsg = GloabalRequestUtil.getNetErrorMsg(response);
                TipsUtils.showShort(getApplicationContext(), errorMsg);
            }
        }
    };


    private String mCallOrderId;

    /**
     * 呼叫视频
     *
     * @param orderId
     */
    private void callVideo(String orderId) {
        mCallOrderId = orderId;
        HashMap<String, String> callParams = new HashMap<>();
        callParams.put("MtcCallInfoServerUserDataKey", orderId);
        MtcCallDelegate.call(mBussnessId, mNick, mOneNick, true, callParams);
        registerMiPush();
    }

    /**
     * 关注
     */
    private void followTutor() {
        String tag_json_obj = "json_obj_follow_tutor_req";
        showLoadDialog();

        JSONObject paramObj = new JSONObject();
        try {
            paramObj.put("gid", mBussnessId);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        PerfectJsonObjectRequest jsonObjReq = new PerfectJsonObjectRequest(mUid, Request.Method.POST,
                Urls.URL_FOLLOW_TUTOR, paramObj, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {
                dismissLoadDialog();
                boolean isOk = GloabalRequestUtil.isRequestOk(response);
                if (isOk) {
                    TipsUtils.showShort(getApplicationContext(), "关注成功");
                    mFollowIv.setImageResource(R.drawable.ic_title_follow_al);
                } else {
                    String errorMsg = GloabalRequestUtil.getNetErrorMsg(response);
                    TipsUtils.showShort(getApplicationContext(), errorMsg);
                }
            }
        }, new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                TipsUtils.showShort(getApplicationContext(), error.getMessage());
                dismissLoadDialog();
            }
        });

        // Adding request to request queue
        BaseApplication.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
    }

    /**
     * 取消关注
     */
    private void cancelFollowTutor() {
        String tag_json_obj = "json_obj_cancel_follow_tutor_req";
        showLoadDialog();

        JSONObject paramObj = new JSONObject();
        try {
            paramObj.put("gid", mBussnessId);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        PerfectJsonObjectRequest jsonObjReq = new PerfectJsonObjectRequest(mUid, Request.Method.POST,
                Urls.URL_CANCEL_FOLLOW_TUTOR, paramObj, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {
                dismissLoadDialog();
                boolean isOk = GloabalRequestUtil.isRequestOk(response);
                if (isOk) {
                    TipsUtils.showShort(getApplicationContext(), "取消关注成功");
                    mFollowIv.setImageResource(R.drawable.ic_title_follow);
                } else {
                    String errorMsg = GloabalRequestUtil.getNetErrorMsg(response);
                    TipsUtils.showShort(getApplicationContext(), errorMsg);
                }
            }
        }, new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                TipsUtils.showShort(getApplicationContext(), error.getMessage());
                dismissLoadDialog();
            }
        });

        // Adding request to request queue
        BaseApplication.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
    }

    private void registerMiPush() {
        String regId = MiPushClient.getRegId(getApplicationContext());
        Log.e("lzm", "regId=" + regId);

        JSONObject pcParam = new JSONObject();
        try {
            pcParam.put("Notify.MiPush.AppId", "瞬语");
            pcParam.put("Notify.MiPush.RegId", regId);
            pcParam.put("Notify.MiPush.Invite.Payload", "粉丝呼叫");
            pcParam.put("Notify.MiPush.Invite.Expiration", "10");
        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.e("lzm", "pcParms=" + pcParam);
        MiPush.register(getApplicationContext(), pcParam.toString());
    }

    private boolean isCallConnected;

    private BroadcastReceiver mCallReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            String outFile = AppFilePath.getJusVideoRecordFile(System.currentTimeMillis() + FileUtils.FILE_FORMAT).getAbsolutePath();
            Log.e("lzm", "outFile=" + outFile);

            if (MtcCallConstants.MtcCallTalkingNotification.equals(action)) { //通话接通
                mSettings.APP_IS_UN_PAY.setValue(true);
                isCallConnected = true;

            } else if (MtcCallConstants.MtcCallDidTermNotification.equals(action)) {
                //通话结束事件，主动挂断
                if (isCallConnected) {
                    getOrderDetails();
                }
                isCallConnected = false;
            } else if (MtcCallConstants.MtcCallTermedNotification.equals(action)) {
                // 通话结束事件，被动挂断
                if (isCallConnected) {
                    getOrderDetails();
                }
                isCallConnected = false;
            }

        }
    };

    private void getOrderDetails() {
        if (TextUtils.isEmpty(mCallOrderId)) {
            return;
        }

        CommonUtils.getOrderDetails(TutorFileActivity.this, mUid, mCallOrderId, "1", mOrderDetailCallback);
    }


    private GsonCallbackListener<OrderDetailsBean> mOrderDetailCallback = new GsonCallbackListener<OrderDetailsBean>() {

        @Override
        public void onResultSuccess(OrderDetailsBean orderDetailsBean) {
            super.onResultSuccess(orderDetailsBean);
            dismissLoadDialog();
            if (orderDetailsBean == null) {
                return;
            }

            OrderDetailsData detailData = orderDetailsBean.getResult();
            if (detailData == null) {
                return;
            }

            Intent payIntent = new Intent(TutorFileActivity.this, PayOrderConfirmAcitivity.class);
            payIntent.putExtra(PayOrderConfirmAcitivity.KEY_DATA_ORDER, detailData);
            startActivity(payIntent);
        }

        @Override
        public void onFailed(String errorMsg) {
            super.onFailed(errorMsg);
            dismissLoadDialog();
            TipsUtils.showShort(getApplicationContext(), errorMsg);
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mCallReceiver);
    }
}
